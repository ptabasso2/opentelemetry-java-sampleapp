plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

description = 'OpenTelemetry Example for OTLP Exporters'

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}


jar {
    manifest {
        attributes 'Main-Class':'io.opentelemetry.otlp.HttpClient'
    }
}

ext {
    openTelemetryVersion = "0.17.0"
    openTelemetryAlphaVersion = "0.17.0-alpha"
    grpcVersion = '1.34.1'
    protobufVersion = '3.11.4'
    protocVersion = protobufVersion
}


version '0.1.0'
shadowJar {
    archiveFileName = "otel-${version}.jar"
}

dependencies {
    implementation platform("io.opentelemetry:opentelemetry-bom:${openTelemetryVersion}")
    implementation platform("io.opentelemetry:opentelemetry-bom-alpha:${openTelemetryAlphaVersion}")
    implementation platform("io.grpc:grpc-bom:${grpcVersion}")
    implementation("io.opentelemetry:opentelemetry-api")
    implementation("io.opentelemetry:opentelemetry-sdk")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp")
    implementation("io.opentelemetry:opentelemetry-exporter-logging")

    //pull in the autoconfigure extension so we parse the `otel.resource.attributes` system property used in the example.
    implementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure")
    implementation("io.opentelemetry:opentelemetry-api-metrics")
    implementation("io.opentelemetry:opentelemetry-sdk-metrics")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp-metrics")

    //external dependency for the grpc transport implementation
    implementation "io.grpc:grpc-netty-shaded"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}